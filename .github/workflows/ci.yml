name: CI

on:
  push:
    branches: [ci-cd]
    tags: ["v*"]
  pull_request:
    branches: [ci-cd]

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE: loncarales/mcpspy

permissions:
  contents: read

jobs:
  # Job to run linters, unit tests, and E2E tests on a single platform (e.g., AMD64)
  # This provides quick feedback on code quality and functionality.
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install build dependencies (for linting/testing on host)
        run: |
          sudo apt-get update
          sudo apt-get install -y clang clang-format llvm make libbpf-dev build-essential

      - name: Install Go development tools (golangci-lint, bpf2go)
        run: |
          go install github.com/cilium/ebpf/cmd/bpf2go@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Download Go modules
        run: go mod download

      - name: Run linters
        run: make lint

      - name: Build local binary for testing
        run: make build

      - name: Run unit tests
        run: make test

      - name: Run end-to-end tests
        # Requires root/privileged access due to eBPF.
        run: sudo -E make test-e2e

  # Job to build cross-platform binaries as release assets
  build_binaries:
    needs: [test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm make libbpf-dev build-essential

      - name: Install Go tools
        run: go install github.com/cilium/ebpf/cmd/bpf2go@latest

      - name: Download dependencies
        run: go mod download

      - name: Build binaries for supported platforms
        run: make build-platforms

      # For now we'll build only for Linux AMD64 and ARM64.
      # Ideally this should be run via another job with a matrix strategy
      - name: Create checksum
        run: |
          cd build
          sha256sum mcpspy-linux-amd64 > mcpspy-linux-amd64.sha256sum
          sha256sum mcpspy-linux-arm64 > mcpspy-linux-arm64.sha256sum

      - name: Upload all binaries and checksums
        uses: actions/upload-artifact@v4
        with:
          name: mcpspy-binaries
          path: build/

  # Job to build and push multi-platform Docker images
  docker_build_and_push:
    needs: [test, build_binaries] # Ensure tests pass and binaries are build before building and pushing Docker image
    strategy:
      matrix:
        arch: [amd64, arm64] # Loop through architectures to build individual images

    runs-on: ubuntu-latest # Use a common runner for Docker builds

    if: github.event_name == 'push' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-platform builds (needed for Buildx to build non-native)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tag suffix
        id: determine_tag_suffix
        run: |
          # Example: latest-amd64, v0.0.1-arm64
          TAG_SUFFIX=${{ matrix.arch }}
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            echo "IMAGE_TAG_WITH_SUFFIX=${{ github.ref_name }}-$TAG_SUFFIX" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG_WITH_SUFFIX=latest-$TAG_SUFFIX" >> $GITHUB_ENV
          fi
          echo "ARCH_SPECIFIC_TAG=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG_WITH_SUFFIX }}" >> $GITHUB_ENV
          echo "Architecture specific tag: ${{ env.ARCH_SPECIFIC_TAG }}"

      - name: Download binary and checksum [${{ matrix.arch }}]
        # Download the binaries needed for this iteration's Docker build
        uses: actions/download-artifact@v4
        with:
          name: mcpspy-binaries
          path: artifacts # Download all to a common 'artifacts' directory

      - name: List downloaded files (for debug)
        run: ls -lR artifacts/ # Will show artifacts/mcpspy-linux-amd64, etc.

      - name: Move binary to expected name for Dockerfile
        # The downloaded artifact will be in a subfolder (e.g., `./artifacts/mcpspy-linux-amd64`).
        # The Dockerfile expects `COPY mcpspy`. So we need to move/rename it.
        run: |
          # Check checksum
          sha256sum -c artifacts/mcpspy-linux-${{ matrix.arch }}.sha256sum || exit 1
          mv artifacts/mcpspy-linux-${{ matrix.arch }} ./mcpspy

      - name: Build and push Docker image (multi-platform)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/docker/Dockerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: ${{ env.ARCH_SPECIFIC_TAG }} # Push with the arch-specific tag

  # Job to create and push the multi-arch manifest list
  create_and_push_manifest:
    needs: [docker_build_and_push] # Must run after all individual Docker images are pushed
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || startsWith(github.ref, 'refs/tags/') # Only on pushes and tags
    permissions:
      contents: read
      packages: write # Required for pushing manifest lists

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine main image tags
        id: determine_main_tags
        run: |
          # Main 'latest' tag for push events on main branch
          MAIN_TAG="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest"

          # Add tag-specific version for tag pushes
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            MAIN_TAG="$MAIN_TAG,${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}"
          fi
          echo "MAIN_IMAGE_TAGS=$MAIN_TAG" >> $GITHUB_ENV
          echo "Main Image Tags: $MAIN_TAG"

      - name: Create and Push Multi-Architecture Manifest List
        run: |
          # Construct the list of architecture-specific tags
          AMD64_TAG="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest-amd64"
          ARM64_TAG="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest-arm64"

          # If it's a tag push, use the specific version tags
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            AMD64_TAG="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}-amd64"
            ARM64_TAG="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}-arm64"
          fi

          # Use a loop to create manifest list for each tag in MAIN_IMAGE_TAGS
          # This creates the manifest for 'latest' and 'vX.Y.Z' if it's a tag push
          for TAG in $(echo "${{ env.MAIN_IMAGE_TAGS }}" | tr ',' ' '); do
            echo "Creating manifest for tag: $$TAG"
            docker buildx imagetools create \
              "$$TAG" \
              "$$AMD64_TAG" \
              "$$ARM64_TAG"
          done
        env:
          # Pass the GitHub Token to allow pushing manifest lists
          DOCKER_CLI_EXPERIMENTAL: enabled # Required for imagetools prior to Docker 23.0
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job to create a GitHub Release and attach both binaries and the Docker image
  release:
    needs: [build_binaries, create_and_push_manifest] # Depends on both jobs completing
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set release tag
        id: get_release_tag
        run: echo "RELEASE_TAG=${GITHUB_REF_NAME}" >> $GITHUB_ENV

      - name: Download all platform binaries
        uses: actions/download-artifact@v4
        with:
          # Use a pattern to download all individual artifact uploads from build_binaries job
          pattern: mcpspy-binaries
          path: artifacts # Download all to a common 'artifacts' directory

      - name: List downloaded files (for debug)
        run: ls -lR artifacts/ # Will show artifacts/mcpspy-linux-amd64, etc.


      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.RELEASE_TAG }}
          tag_name: ${{ github.ref }}
          files: artifacts/mcpspy-*
          body: |
            Release of MCPSpy version ${{ env.RELEASE_TAG }}!

            **Download the binary for your platform:**
            * Linux AMD64: `mcpspy-linux-amd64`
            * Linux ARM64: `mcpspy-linux-arm64`
            * Checksums for binaries are also available.

            **Docker Image (multi-platform):** `${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_TAG }}`

            See the Docker Hub/GHCR page for more details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
